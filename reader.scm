(define (eof-object? ch) (and (char? ch) (= (char->integer ch) 255)))
(define (char-left-paren? ch) (char=? ch #\())
(define (char-right-paren? ch) (char=? ch #\)))
(define (char-comment? ch) (char=? ch #\;))
(define (char-string? ch) (char=? ch #\"))
(define (char-newline? ch) (char=? ch #\newline))
(define (char-dot? ch) (char=? ch #\.))
(define (char-quote? ch) (char=? ch #\'))
(define (char-backquote? ch) (char=? ch #\`))
(define (char-comma? ch) (char=? ch #\,))
(define (char-backslash? ch) (char=? ch #\\))
(define (char-character? ch) (char=? ch #\#))
(define (identifier-end? ch) (or (char-left-paren? ch)
                                 (char-right-paren? ch)
                                 (char-whitespace? ch)))

(define (read)
  (define ch (read-char))
  ;(display "read:")
  ;(write ch)
  ;(newline)
  (cond ((eof-object? ch) ch)
        ((char-left-paren? ch) (read-list))
        ((char-whitespace? ch) (read))
        ((char-comment? ch) (read-comment) (read))
        ((char-quote? ch) (cons 'quote (cons (read) '())))
        ((char-string? ch) (read-string))
        ((char-character? ch) (read-char-literal))
        ((char-numeric? ch) (read-number ch))
        (else (read-identifier ch))))

(define (read-char-literal)
  (define ch (read-char))
  ;(display "read-char-literal:")
  ;(write ch)
  ;(newline)
  (cond ((char-backslash? ch) (read-char-backslash)) 
        (else (let ((id (symbol->string (read-identifier ch))))
                (cond ((string=? id "t") #t)
                      ((string=? id "f") #f)
                      (else (display "ERROR! Unknown character constant #") 
                            (display id)
                            (newline)))))))

(define (read-char-backslash)
  (let ((id (symbol->string (read-identifier (read-char)))))
    (cond ((string=? id "newline") #\newline)
          ((string=? id "space") #\space)
          ((string=? id "tab") (integer->char 9))
          ((= (string-length id) 1) (car (string->list id)))
          (else (display "ERROR! Unknown character constant #\\") 
                (display id)
                (newline)))))

(define (read-comment)
  (if (not (char-newline? (read-char))) (read-comment)))

(define (read-list)
  (define ch (read-char))
  ;(display "read-list:")
  ;(write ch)
  ;(newline)
  (cond ((char-right-paren? ch) '())
        ((and (char-dot? ch) (identifier-end? (peek-char))) (car (read-list)))
        ((char-whitespace? ch) (read-list))
        ((char-comment? ch) (read-comment) (read-list))
        (else (let 
          ((elem (cond ((char-left-paren? ch) (read-list))
                      ((char-quote? ch) (cons 'quote (cons (read) '())))
                      ((char-string? ch) (read-string))
                      ((char-character? ch) (read-char-literal))
                      ((char-numeric? ch) (read-number ch))
                      (else (read-identifier ch)))))
          (cons elem (read-list))))))

(define (char-list->number lst)
  (string->number (list->string lst)))
   
(define (read-number ch)
  ;(display "read-number:")
  ;(write ch)
  ;(newline)
  (define (read-nmb)
    (define peek (peek-char))
    (if (char-numeric? peek) 
        (let ((ch (read-char))) (cons ch (read-nmb))) '()))
  (char-list->number (cons ch (read-nmb))))

(define (read-identifier ch)
  (define (read-id)
    (if (identifier-end? (peek-char)) '()
        (let ((ch (read-char))) (cons ch (read-id)))))
  (string->symbol (list->string (cons ch (read-id)))))
    
(define (interpret-escape ch)
   (cond ((char=? ch #\n) #\newline)          ;\n is newline
         ((char=? ch #\t) (integer->char 9))  ;\t is tab
         (else ch)))

(define (read-string)
  ;(display "read-string:")
  ;(newline)
  (define (read-str)
    (define ch (read-char))
    ;(display "read-str:")
    ;(write ch)
    ;(newline)
    (cond ((char-backslash? ch) (let ((ch (interpret-escape (read-char)))) (cons ch (read-str))))
          ((char-string? ch) '())
          (else (cons ch (read-str)))))
  (list->string (read-str)))

(define (read-all)
  (let ((datum (read)))
    (if (eof-object? datum) (display "EOF reached")
      (begin
        (write datum)
        (newline)
        (read-all)))))

(read-all)
